buildscript {
	ext {
		queryDslVersion = "5.0.0"
		restdocsApiSpecVersion = '0.18.2'
	}
}

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.asciidoctor.jvm.convert' version '3.3.2' // (1)
}

group = 'com.dging'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt // (2)
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 스타터 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// AWS 관련 의존성
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.777'
//	implementation platform('software.amazon.awssdk:bom:2.27.21')
//	implementation 'software.amazon.awssdk:s3'

	// JSON 관련 의존성
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1"
	implementation 'com.google.code.gson:gson'

	// JWT 및 YAML 관련 의존성
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'

	// QueryDSL 관련 의존성
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	// Guava 및 ClassGraph 의존성
	implementation 'com.google.guava:guava:32.0.0-android'
	implementation 'io.github.classgraph:classgraph:4.8.149'

	// Apache Commons 및 Lombok 관련 의존성
	implementation "org.apache.commons:commons-lang3:3.12.0"
	implementation 'org.apache.poi:poi:4.1.2'

	// 데이터베이스 관련 의존성
	implementation "com.mysql:mysql-connector-j:8.1.0"

	// Swagger 관련 의존성
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// P6Spy 관련 의존성
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

	// Lombok 관련 의존성
	implementation("org.projectlombok:lombok:1.18.32")
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	// 테스트 관련 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	testImplementation 'cloud.localstack:localstack-utils:0.2.23'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // (4)
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

openapi3 {
	servers = [
			{ url = 'http://localhost:8080' },
			{ url = 'http://production-api-server-url.com' }
	]
	title = '디깅마켓 API'
	description = 'JUnit5 테스트 기반으로 자동 생성된 API 테스트 페이지 입니다.'
	version = '1.0.0'
	format = 'yaml'
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir // (6)
}

asciidoctor {
	doFirst {
		delete file('src/main/resources/static/docs')
	}
	inputs.dir snippetsDir // (9)
	configurations 'asciidoctorExt' // (7)
	dependsOn test // (10)
}

tasks.register('createOpenApi') {
	dependsOn 'openapi3'
	dependsOn 'asciidoctor'
	doLast {
		copy {
			from 'build/api-spec'
			include '*.yaml'
			into 'src/main/resources/static/docs'
		}
	}
}

bootJar {
	dependsOn 'openapi3'
	from ("build/api-spec") {
		include "*.yaml"
		into "static/docs"
	}
}

// QueryDSL 관련 설정
def querydslDir = file("$buildDir/generated/querydsl")

sourceSets {
	main {
		java {
			srcDir querydslDir
		}
	}
}

configurations {
	querydsl.extendsFrom compileClasspath
}

// QEntity 생성 태스크
tasks.register("generateQueryDSL", JavaCompile) {
	// 기존 QEntity 디렉터리 삭제
	doFirst {
		delete querydslDir
	}
	source = sourceSets.main.java
	classpath = configurations.compileClasspath
	options.annotationProcessorPath = configurations.annotationProcessor
	destinationDir = querydslDir
	doLast {
		println "QueryDSL QEntity 생성 완료"
	}
}